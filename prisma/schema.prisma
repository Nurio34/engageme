generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String   @id @default(cuid())
  userId                         String   @unique
  email                          String   @unique
  name                           String
  fullname                       String   @default("fullname")
  avatar                         String?
  pushToken                      String?  // Optional field to store the push token
  authToken                      String?  // Optional field to store the auth token
  endpoint                       String?  // Subscription endpoint
  posts                          Post[]
  postLikes                      PostLike[]
  postComments                   PostComment[]
  commentLikes                   PostCommentLike[]
  replies                        ReplyComment[]
  replyLikes                     ReplyCommentLike[]
  postLikeNotifications          PostLikeNotification[]
  postCommentNotifications       PostCommentNotification[]
  replyCommentNotifications      ReplyCommentNotification[]
  postCommentLikeNotifications   PostCommentLikeNotification[]
  replyCommentLikeNotifications  ReplyCommentLikeNotification[]
  dontSuggestsMade               DontSuggest[] @relation("UserWhoDoesntWant")
  dontSuggestsReceived           DontSuggest[] @relation("UserToNotBeSuggested")
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt @default(now())
}

model Post {
  id            String     @id @default(cuid())
  message       String
  user          User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String     
  medias        Media[]    
  location      Location?  
  settings      Settings?  
  likes         PostLike[] 
  comments      PostComment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}

model Media {
  id             String    @id @default(cuid())
  publicId       String
  url            String
  type           MediaType
  width          Int?
  height         Int?
  altText        String?
  isAudioAllowed Boolean?
  poster         Poster?   
  transformation Transformation? 
  post           Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String    
}

enum MediaType {
  image
  video
}

model Poster {
  id       String  @id @default(cuid())
  publicId String?
  url      String?
  media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId  String  @unique 
}

model Transformation {
  id      String @id @default(cuid())
  crop    String
  height  String
  width   String
  x       String
  y       String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String @unique 
}

model Location {
  id         String @id @default(cuid())
  locationId String?
  name       String?
  post       Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String @unique 
}

model Settings {
  id                  String @id @default(cuid())
  isCommentingAllowed Boolean
  isCountsVisible     Boolean
  post                Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId              String @unique 
}

model PostLike {
  id            String @id @default(cuid())
  notifications PostLikeNotification[]
  post          Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  postId        String
  user          User @relation(fields: [userId],references: [userId],onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())

  @@unique([userId,postId])
  @@index([id,userId])
}

model PostComment {
  id                        String @id @default(cuid())
  comment                   String
  likes                     PostCommentLike[]
  replies                   ReplyComment[]
  notifications             PostCommentNotification[]
  postId                    String
  post                      Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  userId                    String
  user                      User @relation(fields: [userId],references: [userId],onDelete: Cascade)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt @default(now())
}

model PostCommentLike {
  id        String @id @default(cuid())
  notifications             PostCommentLikeNotification[]
  userId    String
  user      User @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentId String
  comment   PostComment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  @@unique([userId,commentId])
  @@index([id,userId])
}

model ReplyComment {
  id                String  @id @default(cuid())
  comment           String
  replyToName       String?
  replyId           String?
  likes             ReplyCommentLike[]
  notifications     ReplyCommentNotification[]
  commentId         String
  postComment       PostComment @relation(fields: [commentId],references: [id], onDelete: Cascade)
  userId            String
  user              User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt  @default(now())

}

model ReplyCommentLike {
  id            String @id @default(cuid())
  notifications ReplyCommentLikeNotification[]
  userId        String
  user          User @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentId     String
  comment       ReplyComment @relation(fields: [commentId],references: [id],onDelete: Cascade)

  @@unique([userId,commentId])
  @@index([id,userId])
}

model PostLikeNotification {
  id              String  @id @default(cuid())
  type            NotificationType  
  variant         NotificationVariant @default(like)
  isSeen          Boolean @default(false)
  userId          String
  user            User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  postLikeId      String
  postLike        PostLike  @relation(fields: [postLikeId],references: [id],onDelete:Cascade)
  createdAt       DateTime  @default(now())
}

model PostCommentNotification {
  id              String  @id @default(cuid())
  type            NotificationType
  variant         NotificationVariant @default(comment)
  isSeen          Boolean @default(false)
  userId          String
  user            User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentId       String 
  comment         PostComment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

model PostCommentLikeNotification {
  id              String  @id @default(cuid())
  type            NotificationType
  variant         NotificationVariant @default(like)
  isSeen          Boolean @default(false)
  userId          String
  user            User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentLikeId   String 
  commentLike     PostCommentLike @relation(fields: [commentLikeId],references: [id],onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

model ReplyCommentNotification {
  id              String  @id @default(cuid())
  type            NotificationType
  variant         NotificationVariant @default(comment)
  isSeen          Boolean @default(false)
  userId          String
  user            User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentId       String 
  comment         ReplyComment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

model ReplyCommentLikeNotification {
  id              String  @id @default(cuid())
  type            NotificationType
  variant         NotificationVariant @default(like)
  isSeen          Boolean @default(false)
  userId          String
  user            User  @relation(fields: [userId],references: [userId],onDelete: Cascade)
  commentLikeId   String 
  commentLike     ReplyCommentLike @relation(fields: [commentLikeId],references: [id],onDelete: Cascade)
  createdAt       DateTime  @default(now())
}

enum NotificationType {
  postLike
  postComment
  commentLike
  replyComment
  replyLike
}

enum NotificationVariant {
  like
  comment
  follow
}

model DontSuggest {
  id                String @id @default(cuid())

  // Who doesn't want to see whom
  userId            String
  user              User   @relation("UserWhoDoesntWant", fields: [userId], references: [userId], onDelete: Cascade)

  dontSuggestUserId String
  dontSuggestUser   User   @relation("UserToNotBeSuggested", fields: [dontSuggestUserId], references: [userId], onDelete: Cascade)

  @@unique([userId, dontSuggestUserId]) // Prevent duplicates
}
