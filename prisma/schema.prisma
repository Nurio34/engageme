generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String   @unique
  name      String
  avatar    String?
  posts     Post[]   // One-to-many relation with Post
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String     @id @default(cuid())
  message     String
  user        User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String     // Foreign key to User
  medias      Media[]    // One-to-many relation with Media
  location    Location?  // Optional one-to-one relation with Location
  settings    Settings?  // Optional one-to-one relation with Settings
  createdAt   DateTime   @default(now())
  updatedAt   DateTime    @default(now())
}

model Media {
  id             String    @id @default(cuid())
  publicId       String
  url            String
  type           MediaType
  width          Int?
  height         Int?
  altText        String?
  isAudioAllowed Boolean?
  poster         Poster?   // Optional one-to-one relation with Poster
  transformation Transformation? // Optional one-to-one relation with Transformation
  post           Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String    // Foreign key to Post
}

enum MediaType {
  image
  video
}

model Poster {
  id       String  @id @default(cuid())
  publicId String?
  url      String?
  media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId  String  @unique // Foreign key to Media, one-to-one
}

model Transformation {
  id      String @id @default(cuid())
  crop    String
  height  String
  width   String
  x       String
  y       String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String @unique // Foreign key to Media, one-to-one
}

model Location {
  id         String @id @default(cuid())
  locationId String?
  name       String?
  post       Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String @unique // Foreign key to Post, one-to-one
}

model Settings {
  id                  String @id @default(cuid())
  isCommentingAllowed Boolean
  isCountsVisible     Boolean
  post                Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId              String @unique // Foreign key to Post, one-to-one
}